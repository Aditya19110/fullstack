version: '3.8'

services:
  # MongoDB Database
  mongodb:
    image: mongo:7-jammy
    container_name: taskapp-mongodb
    restart: unless-stopped
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: password123
      MONGO_INITDB_DATABASE: fullstack_assignment
    volumes:
      - mongodb_data:/data/db
      - ./mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
    networks:
      - taskapp-network
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/test --quiet
      interval: 30s
      timeout: 10s
      retries: 3

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: taskapp-backend
    restart: unless-stopped
    ports:
      - "5000:5000"
    environment:
      NODE_ENV: production
      PORT: 5000
      MONGODB_URI: mongodb://admin:password123@mongodb:27017/fullstack_assignment?authSource=admin
      JWT_SECRET: your_super_secure_jwt_secret_key_for_production_change_this
      JWT_EXPIRE: 30d
      # Firebase Configuration
      FIREBASE_PROJECT_ID: ${FIREBASE_PROJECT_ID:-your_project_id}
      FIREBASE_PRIVATE_KEY_ID: ${FIREBASE_PRIVATE_KEY_ID:-your_private_key_id}
      FIREBASE_PRIVATE_KEY: ${FIREBASE_PRIVATE_KEY:-your_private_key}
      FIREBASE_CLIENT_EMAIL: ${FIREBASE_CLIENT_EMAIL:-firebase-adminsdk-xxxx@your_project_id.iam.gserviceaccount.com}
      FIREBASE_CLIENT_ID: ${FIREBASE_CLIENT_ID:-your_client_id}
      FIREBASE_AUTH_URI: ${FIREBASE_AUTH_URI:-https://accounts.google.com/o/oauth2/auth}
      FIREBASE_TOKEN_URI: ${FIREBASE_TOKEN_URI:-https://oauth2.googleapis.com/token}
      FIREBASE_AUTH_PROVIDER_X509_CERT_URL: ${FIREBASE_AUTH_PROVIDER_X509_CERT_URL:-https://www.googleapis.com/oauth2/v1/certs}
      FIREBASE_CLIENT_X509_CERT_URL: ${FIREBASE_CLIENT_X509_CERT_URL:-https://www.googleapis.com/robot/v1/metadata/x509/firebase-adminsdk-xxxx%40your_project_id.iam.gserviceaccount.com}
    depends_on:
      mongodb:
        condition: service_healthy
    networks:
      - taskapp-network
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:5000/api/health', (res) => process.exit(res.statusCode === 200 ? 0 : 1)).on('error', () => process.exit(1));"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend Web App
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: taskapp-frontend
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      REACT_APP_API_URL: http://localhost:5000/api
      # Firebase Configuration
      REACT_APP_FIREBASE_API_KEY: ${REACT_APP_FIREBASE_API_KEY:-your_firebase_api_key}
      REACT_APP_FIREBASE_AUTH_DOMAIN: ${REACT_APP_FIREBASE_AUTH_DOMAIN:-your_project_id.firebaseapp.com}
      REACT_APP_FIREBASE_PROJECT_ID: ${REACT_APP_FIREBASE_PROJECT_ID:-your_project_id}
      REACT_APP_FIREBASE_STORAGE_BUCKET: ${REACT_APP_FIREBASE_STORAGE_BUCKET:-your_project_id.appspot.com}
      REACT_APP_FIREBASE_MESSAGING_SENDER_ID: ${REACT_APP_FIREBASE_MESSAGING_SENDER_ID:-your_messaging_sender_id}
      REACT_APP_FIREBASE_APP_ID: ${REACT_APP_FIREBASE_APP_ID:-your_app_id}
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - taskapp-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  mongodb_data:
    driver: local

networks:
  taskapp-network:
    driver: bridge